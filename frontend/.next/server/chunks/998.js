"use strict";exports.id=998,exports.ids=[998],exports.modules={20998:(e,r,s)=>{s.d(r,{nc:()=>d,mo:()=>u,SX:()=>h,kH:()=>g});var t={};s.r(t);var i=s(85665),a=s(51060),o=s(35193);let n=e=>{let r="خطایی رخ داده است. لطفاً دوباره تلاش کنید.";if(e.response){let{data:s,status:t}=e.response;switch(t){case 400:(0,o.M8)(s.detail||"درخواست نامعتبر است.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});break;case 401:(0,o.M8)("لطفاً مجدداً وارد شوید.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}}),window.location.href="/login";break;case 403:(0,o.M8)("شما دسترسی به این بخش را ندارید.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});break;case 404:(0,o.M8)("منبع مورد نظر یافت نشد.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});break;case 429:(0,o.M8)("تعداد درخواست‌های شما بیش از حد مجاز است. لطفاً کمی صبر کنید.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});break;case 500:(0,o.M8)(s.detail||"خطای داخلی سرور رخ داده است.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});break;default:(0,o.M8)(s.detail||r,{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}})}}else e.request?(0,o.M8)("خطا در برقراری ارتباط با سرور. لطفاً اتصال اینترنت خود را بررسی کنید.",{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}}):(0,o.M8)(r,{variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"}});throw e},c=e=>{e.interceptors.response.use(e=>e,e=>(n(e),Promise.reject(e)))};class l{constructor(){this.cacheDuration=3e5,this.client=a.A.create({baseURL:process.env.NEXT_PUBLIC_API_URL,timeout:1e4,headers:{"Content-Type":"application/json"}}),this.cache=new Map,this.setupInterceptors()}static getInstance(){return l.instance||(l.instance=new l),l.instance}setupInterceptors(){c(this.client),this.client.interceptors.request.use(e=>{let r=localStorage.getItem("token");return r&&e.headers&&(e.headers.Authorization=`Bearer ${r}`),e},e=>Promise.reject(e))}getCacheKey(e){return`${e.method}-${e.url}-${JSON.stringify(e.params||{})}-${JSON.stringify(e.data||{})}`}isCacheValid(e){return Date.now()-e<this.cacheDuration}async request(e){let r=this.getCacheKey(e);if(e.method?.toLowerCase()==="get"){let e=this.cache.get(r);if(e&&this.isCacheValid(e.timestamp))return e.data}try{let s=await this.client.request(e);return e.method?.toLowerCase()==="get"&&this.cache.set(r,{data:s.data.data,timestamp:Date.now()}),s.data.data}catch(e){throw this.handleError(e)}}handleError(e){return a.A.isAxiosError(e)&&e.response?Error(e.response.data.message||"An error occurred"):Error("An unexpected error occurred")}async get(e,r){return this.request({...r,method:"get",url:e})}async post(e,r,s){return this.request({...s,method:"post",url:e,data:r})}async put(e,r,s){return this.request({...s,method:"put",url:e,data:r})}async delete(e,r){return this.request({...r,method:"delete",url:e})}clearCache(){this.cache.clear()}invalidateCache(e){for(let[r]of this.cache)r.includes(e)&&this.cache.delete(r)}}l.getInstance();let d=(0,i.vt)(e=>({user:null,isAuthenticated:!1,isLoading:!1,error:null,login:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.auth.login(r);e({user:s.user,isAuthenticated:!0,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to login",isLoading:!1}),r}},loginWithTelegram:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.auth.loginWithTelegram(r);e({user:s.user,isAuthenticated:!0,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to login with Telegram",isLoading:!1}),r}},logout:async()=>{e({isLoading:!0,error:null});try{await t.services.auth.logout(),e({user:null,isAuthenticated:!1,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to logout",isLoading:!1}),r}},getCurrentUser:async()=>{e({isLoading:!0,error:null});try{let r=await t.services.auth.getCurrentUser();e({user:r,isAuthenticated:!0,isLoading:!1})}catch(r){throw e({user:null,isAuthenticated:!1,error:r.message||"Failed to get current user",isLoading:!1}),r}}})),g=(0,i.vt)((e,r)=>({users:[],selectedUser:null,total:0,page:1,limit:10,isLoading:!1,error:null,getUsers:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.users.getUsers(r);e({users:s.items,total:s.total,page:s.page,limit:s.limit,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch users",isLoading:!1}),r}},getUser:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.users.getUser(r);e({selectedUser:s,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch user",isLoading:!1}),r}},createUser:async s=>{e({isLoading:!0,error:null});try{await t.services.users.createUser(s),await r().getUsers({page:r().page,limit:r().limit})}catch(r){throw e({error:r.message||"Failed to create user",isLoading:!1}),r}},updateUser:async(r,s)=>{e({isLoading:!0,error:null});try{let i=await t.services.users.updateUser(r,s);e(e=>({users:e.users.map(e=>e.id===r?i:e),selectedUser:i,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to update user",isLoading:!1}),r}},deleteUser:async r=>{e({isLoading:!0,error:null});try{await t.services.users.deleteUser(r),e(e=>({users:e.users.filter(e=>e.id!==r),isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to delete user",isLoading:!1}),r}},blockUser:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.users.blockUser(r);e(e=>({users:e.users.map(e=>e.id===r?s:e),selectedUser:s,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to block user",isLoading:!1}),r}},unblockUser:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.users.unblockUser(r);e(e=>({users:e.users.map(e=>e.id===r?s:e),selectedUser:s,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to unblock user",isLoading:!1}),r}},addCredit:async(r,s)=>{e({isLoading:!0,error:null});try{let i=await t.services.users.addCredit(r,s);e(e=>({users:e.users.map(e=>e.id===r?i:e),selectedUser:i,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to add credit",isLoading:!1}),r}}})),u=(0,i.vt)((e,r)=>({servers:[],selectedServer:null,total:0,page:1,limit:10,isLoading:!1,error:null,getServers:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.servers.getServers(r);e({servers:s.items,total:s.total,page:s.page,limit:s.limit,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch servers",isLoading:!1}),r}},getServer:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.servers.getServer(r);e({selectedServer:s,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch server",isLoading:!1}),r}},createServer:async s=>{e({isLoading:!0,error:null});try{await t.services.servers.createServer(s),await r().getServers({page:r().page,limit:r().limit})}catch(r){throw e({error:r.message||"Failed to create server",isLoading:!1}),r}},updateServer:async(r,s)=>{e({isLoading:!0,error:null});try{let i=await t.services.servers.updateServer(r,s);e(e=>({servers:e.servers.map(e=>e.id===r?i:e),selectedServer:i,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to update server",isLoading:!1}),r}},deleteServer:async r=>{e({isLoading:!0,error:null});try{await t.services.servers.deleteServer(r),e(e=>({servers:e.servers.filter(e=>e.id!==r),isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to delete server",isLoading:!1}),r}},toggleMaintenanceMode:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.servers.toggleMaintenanceMode(r);e(e=>({servers:e.servers.map(e=>e.id===r?s:e),selectedServer:s,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to toggle maintenance mode",isLoading:!1}),r}},getServerStats:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.servers.getServerStats(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to get server stats",isLoading:!1}),r}},getServerLoad:async e=>{try{return await t.services.servers.getServerLoad(e)}catch(e){throw e}},backupServer:async r=>{e({isLoading:!0,error:null});try{await t.services.servers.backupServer(r),e({isLoading:!1})}catch(r){throw e({error:r.message||"Failed to backup server",isLoading:!1}),r}},restoreServer:async(r,s)=>{e({isLoading:!0,error:null});try{await t.services.servers.restoreServer(r,s),e({isLoading:!1})}catch(r){throw e({error:r.message||"Failed to restore server",isLoading:!1}),r}},getServerBackups:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.servers.getServerBackups(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to get server backups",isLoading:!1}),r}}})),h=(0,i.vt)((e,r)=>({subscriptions:[],selectedSubscription:null,total:0,page:1,limit:10,isLoading:!1,error:null,getSubscriptions:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.getSubscriptions(r);e({subscriptions:s.items,total:s.total,page:s.page,limit:s.limit,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch subscriptions",isLoading:!1}),r}},getSubscription:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.getSubscription(r);e({selectedSubscription:s,isLoading:!1})}catch(r){throw e({error:r.message||"Failed to fetch subscription",isLoading:!1}),r}},createSubscription:async s=>{e({isLoading:!0,error:null});try{await t.services.subscriptions.createSubscription(s),await r().getSubscriptions({page:r().page,limit:r().limit})}catch(r){throw e({error:r.message||"Failed to create subscription",isLoading:!1}),r}},updateSubscription:async(r,s)=>{e({isLoading:!0,error:null});try{let i=await t.services.subscriptions.updateSubscription(r,s);e(e=>({subscriptions:e.subscriptions.map(e=>e.id===r?i:e),selectedSubscription:i,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to update subscription",isLoading:!1}),r}},deleteSubscription:async r=>{e({isLoading:!0,error:null});try{await t.services.subscriptions.deleteSubscription(r),e(e=>({subscriptions:e.subscriptions.filter(e=>e.id!==r),isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to delete subscription",isLoading:!1}),r}},renewSubscription:async(r,s)=>{e({isLoading:!0,error:null});try{let i=await t.services.subscriptions.renewSubscription(r,s);e(e=>({subscriptions:e.subscriptions.map(e=>e.id===r?i:e),selectedSubscription:i,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to renew subscription",isLoading:!1}),r}},cancelSubscription:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.cancelSubscription(r);e(e=>({subscriptions:e.subscriptions.map(e=>e.id===r?s:e),selectedSubscription:s,isLoading:!1}))}catch(r){throw e({error:r.message||"Failed to cancel subscription",isLoading:!1}),r}},getSubscriptionConfig:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.getSubscriptionConfig(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to get subscription config",isLoading:!1}),r}},getSubscriptionUsage:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.getSubscriptionUsage(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to get subscription usage",isLoading:!1}),r}},getSubscriptionInvoices:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.getSubscriptionInvoices(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to get subscription invoices",isLoading:!1}),r}},generateSubscriptionConfig:async r=>{e({isLoading:!0,error:null});try{let s=await t.services.subscriptions.generateSubscriptionConfig(r);return e({isLoading:!1}),s}catch(r){throw e({error:r.message||"Failed to generate subscription config",isLoading:!1}),r}}}))}};